var _user$project$Calendar$tagsForCategories = F2(
	function (model, categories) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('tags'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (c) {
					var _p0 = function () {
						var _p1 = A2(
							_elm_community$list_extra$List_Extra$find,
							function (cat) {
								return _elm_lang$core$Native_Utils.eq(cat.name, c);
							},
							model.categories);
						if (_p1.ctor === 'Just') {
							var _p2 = _p1._0;
							return {ctor: '_Tuple2', _0: _p2.lightItemColor, _1: _p2.backgroundColor};
						} else {
							return {ctor: '_Tuple2', _0: '', _1: ''};
						}
					}();
					var textColor = _p0._0;
					var bgColor = _p0._1;
					return A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tag'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'color', _1: textColor},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'background-color', _1: bgColor},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(c),
							_1: {ctor: '[]'}
						});
				},
				categories));
	});
var _user$project$Calendar$calendarItem = F3(
	function (model, category, item) {
		var isHoverItem = function () {
			var _p3 = model.hoverIntent;
			switch (_p3.ctor) {
				case 'Hover':
					return _elm_lang$core$Native_Utils.eq(
						A2(_elm_lang$core$Basics_ops['++'], category.name, item.url),
						_p3._0);
				case 'Intent':
					return false;
				default:
					return false;
			}
		}();
		var _p4 = function () {
			var _p5 = model.calendarView;
			if (_p5.ctor === 'BySite') {
				return {ctor: '_Tuple2', _0: category.itemColor, _1: category.backgroundColor};
			} else {
				var _p6 = A2(
					_elm_community$list_extra$List_Extra$find,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.name, item.category);
					},
					model.categories);
				if (_p6.ctor === 'Just') {
					var _p7 = _p6._0;
					return {ctor: '_Tuple2', _0: _p7.itemColor, _1: _p7.backgroundColor};
				} else {
					return {ctor: '_Tuple2', _0: category.itemColor, _1: category.backgroundColor};
				}
			}
		}();
		var itemColor = _p4._0;
		var backgroundColor = _p4._1;
		var iconClass = function () {
			var _p8 = item.eventType;
			switch (_p8) {
				case 'catalog':
					return 'fas fa-dollar-sign';
				case 'poll':
					return 'fas fa-chart-bar';
				case 'video':
					return 'fas fa-video';
				case 'mehrathon':
					return 'fas fa-meh';
				default:
					return '';
			}
		}();
		var continuesToNext = A3(
			_rluiten$elm_date_extra$Date_Extra_Compare$is,
			_rluiten$elm_date_extra$Date_Extra_Compare$After,
			item.end,
			A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, 1, model.end));
		var continuesFromPrev = A3(
			_rluiten$elm_date_extra$Date_Extra_Compare$is,
			_rluiten$elm_date_extra$Date_Extra_Compare$Before,
			_user$project$Models$removeTime(item.start),
			_user$project$Models$removeTime(model.start));
		var startEndText = function () {
			var _p9 = {ctor: '_Tuple2', _0: continuesFromPrev, _1: continuesToNext};
			if (_p9._0 === true) {
				if (_p9._1 === true) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						A3(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, '« %B %e', item.start),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' through ',
							A3(
								_rluiten$elm_date_extra$Date_Extra_Format$format,
								_rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config,
								'%B %e »',
								A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, -1, item.end))));
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'« from ',
						A3(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, '%B %e', item.start));
				}
			} else {
				if (_p9._1 === true) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'through ',
						A3(
							_rluiten$elm_date_extra$Date_Extra_Format$format,
							_rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config,
							'%B %e »',
							A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, -1, item.end)));
				} else {
					return '';
				}
			}
		}();
		var itemEnd = A2(
			_elm_lang$core$Basics$min,
			2 + A2(_rluiten$elm_date_extra$Date_Extra_Duration$diffDays, model.end, model.start),
			1 + A2(_rluiten$elm_date_extra$Date_Extra_Duration$diffDays, item.end, model.start));
		var itemStart = A2(
			_elm_lang$core$Basics$max,
			1,
			1 + A2(_rluiten$elm_date_extra$Date_Extra_Duration$diffDays, item.start, model.start));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'calendar-item is-size-7 has-text-centered',
						A2(
							_elm_lang$core$Basics_ops['++'],
							continuesFromPrev ? ' calendar-item-continues-from-prev' : '',
							A2(
								_elm_lang$core$Basics_ops['++'],
								continuesToNext ? ' calendar-item-continues-to-next' : '',
								isHoverItem ? ' calendar-item-hover' : '')))),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: itemColor},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'border-color', _1: backgroundColor},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'grid-column-start',
										_1: _elm_lang$core$Basics$toString(itemStart)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'grid-column-end',
											_1: _elm_lang$core$Basics$toString(itemEnd)
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onMouseEnter(
							_user$project$Msgs$StartHoverIntent(
								A2(_elm_lang$core$Basics_ops['++'], category.name, item.url))),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onMouseLeave(_user$project$Msgs$CancelHover),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('has-text-weight-semibold'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(item.text),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('calendar-item-card'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: (continuesFromPrev || continuesToNext) ? A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('is-size-7'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(startEndText),
									_1: {ctor: '[]'}
								}) : _elm_lang$html$Html$text(''),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('calendar-item-photo'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: (!_elm_lang$core$String$isEmpty(item.photo)) ? A2(
											_elm_lang$html$Html$img,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$src(item.photo),
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}) : _elm_lang$html$Html$text(''),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: (_elm_lang$core$Native_Utils.eq(model.calendarView, _user$project$Models$Combined) || (_elm_lang$core$Native_Utils.cmp(
										_elm_lang$core$List$length(item.allCategories),
										1) > 0)) ? A2(_user$project$Calendar$tagsForCategories, model, item.allCategories) : _elm_lang$html$Html$text(''),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('calendar-item-buttons buttons'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: (!_elm_lang$core$String$isEmpty(item.mediaUrl)) ? A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href(item.mediaUrl),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$target('_blank'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('button is-primary is-small'),
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Preview'),
														_1: {ctor: '[]'}
													}) : _elm_lang$html$Html$text(''),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href(item.url),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$class('button is-link is-small'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('Edit'),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href('#'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$class('button is-small'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Events$onClick(
																			_user$project$Msgs$NavigateDetail(item)),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Details'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(
									A2(_elm_lang$core$Basics_ops['++'], 'calendar-item-icon ', iconClass)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$title(item.eventType),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Calendar$categoryItems = F3(
	function (model, category, items) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('calendar-category-items'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: category.backgroundColor},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'border-left',
									_1: A2(_elm_lang$core$Basics_ops['++'], '4px solid ', category.backgroundColorDark)
								},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$List$map,
				function (item) {
					return A3(_user$project$Calendar$calendarItem, model, category, item);
				},
				items));
	});
var _user$project$Calendar$category = F3(
	function (model, category, itemsForCategory) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('calendar-category'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('calendar-category-name'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: category.backgroundColor},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'border-left',
											_1: A2(_elm_lang$core$Basics_ops['++'], '4px solid ', category.backgroundColorDark)
										},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: category.lightItemColor},
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('has-text-weight-bold is-size-4'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(category.name),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: (!_elm_lang$core$Native_Utils.eq(category.name, 'All Events')) ? A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('button is-small is-rounded is-info'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '8px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'vertical-align', _1: 'text-top'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												_user$project$Msgs$ToggleCategory(category.name)),
											_1: {ctor: '[]'}
										}
									}
								},
								category.selected ? {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('icon is-small'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('fas fa-eye-slash'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('hide'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								} : {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('icon is-small'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$i,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('fas fa-eye'),
													_1: {ctor: '[]'}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('show'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}) : _elm_lang$html$Html$text(''),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('calendar-category-header'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: category.backgroundColor},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'border-left',
												_1: A2(_elm_lang$core$Basics_ops['++'], '4px solid ', category.backgroundColorDark)
											},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						A2(
							_elm_lang$core$List$map,
							function (d) {
								var dayCssClass = _elm_lang$core$Native_Utils.eq(
									_user$project$Models$removeTime(d),
									_user$project$Models$removeTime(model.currentDate)) ? ' calendar-category-day-header-current-date' : '';
								return A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class(
											A2(_elm_lang$core$Basics_ops['++'], 'calendar-category-day-header has-text-grey-dark has-text-weight-bold has-text-centered', dayCssClass)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A3(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, '%a %e', d)),
										_1: {ctor: '[]'}
									});
							},
							A2(
								_elm_lang$core$List$map,
								function (i) {
									return A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, i, model.start);
								},
								A2(_elm_lang$core$List$range, 0, 6)))),
					_1: {
						ctor: '::',
						_0: A3(
							_user$project$Calendar$categoryItems,
							model,
							category,
							A2(
								_elm_lang$core$List$sortBy,
								function (i) {
									return A2(
										_elm_lang$core$Basics_ops['++'],
										i.category,
										A2(
											_elm_lang$core$Basics_ops['++'],
											i.eventType,
											_rluiten$elm_date_extra$Date_Extra_Format$isoString(i.start)));
								},
								itemsForCategory)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Calendar$calendarHeader = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('calendar-header'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('calendar-header-prev'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('button is-white'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Msgs$AdjustCalendar(-7)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('fas fa-angle-double-left'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('calendar-header-date'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Week of ',
								A3(_rluiten$elm_date_extra$Date_Extra_Format$format, _rluiten$elm_date_extra$Date_Extra_Config_Config_en_us$config, '%B %e, %Y', model.start))),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('calendar-header-next'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('button is-white'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Msgs$AdjustCalendar(7)),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('fas fa-angle-double-right'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Calendar$calendar = function (model) {
	var calendarItemsDict = A2(
		_elm_community$dict_extra$Dict_Extra$groupBy,
		function (_) {
			return _.category;
		},
		A2(
			_elm_lang$core$List$filter,
			function (i) {
				return (A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$Before, i.start, model.start) && A3(_rluiten$elm_date_extra$Date_Extra_Compare$is, _rluiten$elm_date_extra$Date_Extra_Compare$After, i.end, model.end)) || (A4(_rluiten$elm_date_extra$Date_Extra_Compare$is3, _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenEnd, i.start, model.start, model.end) || A4(_rluiten$elm_date_extra$Date_Extra_Compare$is3, _rluiten$elm_date_extra$Date_Extra_Compare$BetweenOpenEnd, i.end, model.start, model.end));
			},
			model.items));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('calendar'),
			_1: {ctor: '[]'}
		},
		function () {
			var _p10 = model.calendarView;
			if (_p10.ctor === 'BySite') {
				return {
					ctor: '::',
					_0: _user$project$Calendar$calendarHeader(model),
					_1: A2(
						_elm_lang$core$List$map,
						function (c) {
							var _p11 = A2(_elm_lang$core$Dict$get, c.name, calendarItemsDict);
							if (_p11.ctor === 'Just') {
								return A3(_user$project$Calendar$category, model, c, _p11._0);
							} else {
								return _elm_lang$html$Html$text('');
							}
						},
						A2(
							_elm_lang$core$List$filter,
							function (c) {
								return _elm_lang$core$Native_Utils.eq(model.selectedChannel, _user$project$Models$All) || ((_elm_lang$core$Native_Utils.eq(c.channel, 'retail') && (_elm_lang$core$Native_Utils.eq(model.selectedChannel, _user$project$Models$Retail) && c.selected)) || (_elm_lang$core$Native_Utils.eq(c.channel, 'fulfillment') && (_elm_lang$core$Native_Utils.eq(model.selectedChannel, _user$project$Models$Fulfillment) && c.selected)));
							},
							model.categories))
				};
			} else {
				return {
					ctor: '::',
					_0: _user$project$Calendar$calendarHeader(model),
					_1: {
						ctor: '::',
						_0: A3(
							_user$project$Calendar$category,
							model,
							_user$project$Models$combinedCategory,
							A2(
								_elm_community$list_extra$List_Extra$uniqueBy,
								function (i) {
									return i.url;
								},
								A2(
									_elm_lang$core$List$filter,
									function (i) {
										var _p12 = function () {
											var _p13 = A2(
												_elm_community$list_extra$List_Extra$find,
												function (c) {
													return _elm_lang$core$Native_Utils.eq(c.name, i.category);
												},
												model.categories);
											if (_p13.ctor === 'Just') {
												var _p14 = _p13._0;
												return {ctor: '_Tuple2', _0: _p14.channel, _1: _p14.selected};
											} else {
												return {ctor: '_Tuple2', _0: 'all', _1: true};
											}
										}();
										var channel = _p12._0;
										var selected = _p12._1;
										return _elm_lang$core$Native_Utils.eq(model.selectedChannel, _user$project$Models$All) || ((_elm_lang$core$Native_Utils.eq(channel, 'retail') && (_elm_lang$core$Native_Utils.eq(model.selectedChannel, _user$project$Models$Retail) && selected)) || (_elm_lang$core$Native_Utils.eq(channel, 'fulfillment') && (_elm_lang$core$Native_Utils.eq(model.selectedChannel, _user$project$Models$Fulfillment) && selected)));
									},
									model.items))),
						_1: {ctor: '[]'}
					}
				};
			}
		}());
};

var _user$project$Update$saveSettings = function (model) {
	return _user$project$Ports$saveUserSettings(
		A3(
			_user$project$Models$UserSettings,
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.name;
				},
				A2(
					_elm_lang$core$List$filter,
					function (_p0) {
						return !function (_) {
							return _.selected;
						}(_p0);
					},
					model.categories)),
			_user$project$Models$channelViewToString(model.selectedChannel),
			_user$project$Models$calendarViewToString(model.calendarView)));
};
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'SetDate':
				var _p2 = _p1._0;
				var newEnd = _user$project$Models$removeTime(
					_user$project$Models$endOfWeek(_p2));
				var newStart = _user$project$Models$removeTime(
					_user$project$Models$beginningOfWeek(_p2));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentDate: _p2, start: newStart, end: newEnd}),
					_1: _user$project$Ports$search(
						A3(
							_user$project$Models$SearchQuery,
							'',
							_rluiten$elm_date_extra$Date_Extra_Format$isoString(newStart),
							_rluiten$elm_date_extra$Date_Extra_Format$isoString(newEnd)))
				};
			case 'AdjustCalendar':
				var _p3 = _p1._0;
				var newEnd = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, _p3, model.end);
				var newStart = A3(_rluiten$elm_date_extra$Date_Extra_Duration$add, _rluiten$elm_date_extra$Date_Extra_Duration$Day, _p3, model.start);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							start: newStart,
							end: newEnd,
							items: {ctor: '[]'},
							pageState: _user$project$Models$Loading
						}),
					_1: _user$project$Ports$search(
						A3(
							_user$project$Models$SearchQuery,
							model.query,
							_rluiten$elm_date_extra$Date_Extra_Format$isoString(newStart),
							_rluiten$elm_date_extra$Date_Extra_Format$isoString(newEnd)))
				};
			case 'ToggleCategory':
				var updatedCategories = A2(
					_elm_lang$core$List$map,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(c.name, _p1._0) ? _elm_lang$core$Native_Utils.update(
							c,
							{selected: !c.selected}) : c;
					},
					model.categories);
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{categories: updatedCategories});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Update$saveSettings(model)
				};
			case 'Search':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pageState: _user$project$Models$Loading}),
					_1: _user$project$Ports$search(
						A3(
							_user$project$Models$SearchQuery,
							model.query,
							_rluiten$elm_date_extra$Date_Extra_Format$isoString(model.start),
							_rluiten$elm_date_extra$Date_Extra_Format$isoString(model.end)))
				};
			case 'SearchResults':
				var newItems = function () {
					var _p4 = A2(
						_elm_lang$core$Json_Decode$decodeValue,
						_elm_lang$core$Json_Decode$list(_user$project$Models$calendarItemDecoder),
						_p1._0);
					if (_p4.ctor === 'Ok') {
						var _p5 = _p4._0;
						return A2(
							_elm_lang$core$List$map,
							function (i) {
								return _elm_lang$core$Native_Utils.update(
									i,
									{
										allCategories: A2(
											_elm_lang$core$List$map,
											function (i2) {
												return i2.category;
											},
											A2(
												_elm_lang$core$List$filter,
												function (i2) {
													return _elm_lang$core$Native_Utils.eq(i2.url, i.url);
												},
												_p5))
									});
							},
							_p5);
					} else {
						return A2(
							_elm_lang$core$Debug$log,
							_p4._0,
							{ctor: '[]'});
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{items: newItems, pageState: _user$project$Models$Calendar}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChangeQuery':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{query: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GetSources':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pageState: _user$project$Models$Loading}),
					_1: _user$project$Ports$getSources(
						{ctor: '_Tuple0'})
				};
			case 'Sources':
				var newCategories = function () {
					var _p6 = A2(
						_elm_lang$core$Json_Decode$decodeValue,
						_elm_lang$core$Json_Decode$list(_user$project$Models$sourceDecoder),
						_p1._0);
					if (_p6.ctor === 'Ok') {
						return _user$project$Models$categoriesFromSources(_p6._0);
					} else {
						return A2(
							_elm_lang$core$Debug$log,
							_p6._0,
							{ctor: '[]'});
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{categories: newCategories}),
					_1: _user$project$Ports$getUserSettings(
						{ctor: '_Tuple0'})
				};
			case 'SelectChannel':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{selectedChannel: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Update$saveSettings(newModel)
				};
			case 'SelectCalendarView':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{calendarView: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Update$saveSettings(newModel)
				};
			case 'UserSettingsResults':
				var userSettings = function () {
					var _p7 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Models$userSettingsDecoder, _p1._0);
					if (_p7.ctor === 'Ok') {
						return _p7._0;
					} else {
						return A2(
							_elm_lang$core$Debug$log,
							_p7._0,
							A3(
								_user$project$Models$UserSettings,
								{ctor: '[]'},
								'retail',
								'by site'));
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							calendarView: _user$project$Models$stringToCalendarView(userSettings.selectedView),
							selectedChannel: _user$project$Models$stringToChannelView(userSettings.selectedChannel),
							categories: A2(
								_elm_lang$core$List$map,
								function (c) {
									return A2(_elm_lang$core$List$member, c.name, userSettings.filteredCategories) ? _elm_lang$core$Native_Utils.update(
										c,
										{selected: false}) : c;
								},
								model.categories)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'StartHoverIntent':
				var delayHoverCmd = A2(
					_elm_lang$core$Task$perform,
					function (_p8) {
						return _user$project$Msgs$StartHover;
					},
					_elm_lang$core$Process$sleep(200 * _elm_lang$core$Time$millisecond));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							hoverIntent: _user$project$Models$Intent(_p1._0)
						}),
					_1: delayHoverCmd
				};
			case 'StartHover':
				var newHoverIntent = function () {
					var _p9 = model.hoverIntent;
					switch (_p9.ctor) {
						case 'Intent':
							return _user$project$Models$Hover(_p9._0);
						case 'Hover':
							return _user$project$Models$Hover(_p9._0);
						default:
							return _user$project$Models$None;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{hoverIntent: newHoverIntent}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CancelHover':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{hoverIntent: _user$project$Models$None}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NavigateDetail':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pageState: _user$project$Models$Detail,
							detailItem: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{pageState: _user$project$Models$Calendar, detailItem: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
